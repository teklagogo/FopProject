
import java.util.*;

public class ninoo {
    private static final Map<String, String> swiftToJavaMap = new HashMap<>();

    static {
        swiftToJavaMap.put("reverseNumber", "reverseNumber"); // Removed factorial mapping
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Let the user input Swift code (reverseNumber(n))
        System.out.print("Enter Swift code: ");
        String swiftCode = scanner.nextLine();  // Read user input

        try {
            System.out.println("Input: " + swiftCode);
            Object result = interpret(swiftCode);
            System.out.println("Output: " + result);
        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
            e.printStackTrace();
        }
    }

    public static Object interpret(String swiftCode) throws Exception {
        // Validate input format
        if (!swiftCode.contains("(") || !swiftCode.endsWith(")")) {
            throw new IllegalArgumentException("Invalid input format. Expected 'functionName(argument)'.");
        }

        // Extract function name and arguments
        String functionName = swiftCode.substring(0, swiftCode.indexOf("(")).trim();
        String arguments = swiftCode.substring(swiftCode.indexOf("(") + 1, swiftCode.lastIndexOf(")")).trim();

        // Debugging
        System.out.println("Parsed function name: " + functionName);
        System.out.println("Parsed arguments: " + arguments);

        if (functionName.isEmpty() || arguments.isEmpty()) {
            throw new IllegalArgumentException("Function name or arguments cannot be empty.");
        }

        // Execute the function
        return executeLine(functionName, arguments);
    }

    public static Object executeLine(String functionName, String arguments) throws Exception {
        if (!swiftToJavaMap.containsKey(functionName)) {
            throw new RuntimeException("Unknown command: " + functionName + "(" + arguments + ")");
        }

        String javaMethod = swiftToJavaMap.get(functionName);

        switch (javaMethod) {
            case "reverseNumber":
                int number = parseInteger(arguments);
                return reverseNumber(number);

            default:
                throw new RuntimeException("Unimplemented command: " + functionName);
        }
    }

    public static int reverseNumber(int number) {
        int reversed = 0;
        while (number != 0) {
            int digit = number % 10;
            reversed = reversed * 10 + digit;
            number /= 10;
        }
        return reversed;
    }

    // Helper method to safely parse integers
    private static int parseInteger(String input) {
        try {
            return Integer.parseInt(input);
        } catch (NumberFormatException e) {
            throw new IllegalArgumentException("Invalid argument. Expected an integer but got: " + input);

        }
    }
}

